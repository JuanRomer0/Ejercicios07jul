EJERCICIO 1:
	Cálculo de Bonificaciones de Empleados

DELIMITER 

CREATE FUNCTION calcular_bonificacion (salario DECIMAL(10,2))
RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN IF
	DECLARE bonificacion_menor DECIMAL(10,2);
	SET bonificacion_menor = salario * 0.10;
      ELSE IF
	DECLARE bonificacion_media DECIMAL(10,2);
	SET bonificacion_media = salario * 0.07; 
	RETURN bonificacion_media;
      ELSE
	DECLARE bonificacion_mayor DECIMAL(10,2);
	SET bonificacion_mayor = salario * 0.05; 
	RETURN bonificacion_mayor;
END //

DELIMITER ;

//////////////////////////////////////////////////////////////////////////////////////

correccion:
Declaraciones después de un RETURN los returns extra hacen que se CANCELE la sig accion

 
DELIMITER //

CREATE FUNCTION calcular_bonificacion(salario DECIMAL(10,2)) 
RETURNS DECIMAL(10,2)
DETERMINISTIC
BEGIN
    DECLARE bonificacion DECIMAL(10,2);
    
    IF salario < 2000 THEN
        SET bonificacion = salario * 0.10;
    ELSEIF salario >= 2000 AND salario <= 5000 THEN
        SET bonificacion = salario * 0.07;
    ELSE
        SET bonificacion = salario * 0.05;
    END IF;
    
    RETURN bonificacion;
END //

DELIMITER ;

SELECT nombre,salario, calcular_bonificacion(salario) AS bonificacion
FROM empleados;

///////////////////////////////////////////////////////////////////////////////////////


ELERCICIO 2:
	Cálculo de Edad de Clientes
	
DELIMITER //

CREATE FUNCTION calcular_edad (fecha_nacimiento, CURDATE());
RETURN INT 
DETERMINISTIC
BEGIN
RETURN TIMESTAMPDIFF(YEAR, fecha_nacimiento, CURDATE());
END //

DELIMITER ;

SELECT nombre, fecha_nacimiento,calcular_edad(fecha_nacimiento) AS edad
FROM clientes;

///////////////////////////////////////////////////////////////////////////////////////

EJERCICIO 3:
	Formatear Números de Teléfono

1.hay que crear una tabla llamada contactos donde almacene nombre y telefono

CREATE TABLE contactos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nombre VARCHAR(100),
    telefono VARCHAR(20)
);

2.entonces ahora tenemos una tabla vacia por lo tanto debemos rellenarla con sus respectivos datos

INSERT INTO contactos (nombre, telefono) VALUES
('Ana Martínez', '(XXX) XXX-XXXX'),
('Carlos López', '(XXX) XXX-XXXX'),
('Lucía Gómez', '(XXX) XXX-XXXX'),
('Pedro Sánchez', '(XXX) XXX-XXXX'),
('María Torres', '(XXX) XXX-XXXX');

3. hacer el delimiter

DELIMITER //

CREATE FUNCTION formatear_telefono(numero VARCHAR(20))
RETURNS VARCHAR(15)
DETERMINISTIC
BEGIN
    RETURN CONCAT(
        '(', SUBSTRING(REGEXP_REPLACE(numero, '[^0-9]', ''), 1, 3), ') ',
             SUBSTRING(REGEXP_REPLACE(numero, '[^0-9]', ''), 4, 3), '-',
             SUBSTRING(REGEXP_REPLACE(numero, '[^0-9]', ''), 7, 4)
    );
END //

DELIMITER ;
 
SELECT nombre, telefono, formatear_telefono(telefono) AS telefono_formateado
FROM contactos;

////////////////////////////////////////////////////////////////////////////////////////

EJERCICIO 4:
	Clasificación de Productos por Precio
	
1.hay que crear una tabla llamada contactos donde almacene nombre, precio y categoria

CREATE TABLE IF NOT EXISTS productos(
id INT PRIMARY KEY AUTO_INCREMENT,
nombre VARCHAR(100),
precio DECIMAL(10,2),
categoria VARCHAR(10)
);

2.entonces ahora tenemos una tabla vacia por lo tanto debemos rellenarla con sus respectivos datos

INSERT INTO productos (nombre, precio) VALUES
('SmartPhone', 500.00),
('Tablet', 350.00),
('Audífonos Inalambricos', 75.00),
('Monitor', 180.00),
('Cargador', 10.00),
('Laptop Gamer', 1000.00);

3. hacer el delimiter

DELIMITER //

CREATE FUNCTION clasificar_precio(precio DECIMAL(10,2))
RETURNS VARCHAR(10)
DETERMINISTIC
BEGIN
    DECLARE categoria VARCHAR(10);

    -- Clasificar según el precio
    IF precio < 50 THEN
        SET categoria = 'Bajo';
    ELSEIF precio >= 50 AND precio <= 200 THEN
        SET categoria = 'Medio';
    ELSE
        SET categoria = 'Alto';
    END IF;

    RETURN categoria;
END //

DELIMITER ;

SELECT nombre, precio, clasificar_precio(precio) AS clasificacion
FROM productos;
